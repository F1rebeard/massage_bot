import logging

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from keyboards.main_menu import user_menu, admin_menu
from keyboards.user_kb import (
    service_inline_keyboard,
    get_service_info,
    extra_service_inline_keyboard,
    extra_service_kb
)
from massage_calendar.massage_calendar import MassageCalendar, calendar_callback
from create_bot import bot, db
from constants import ADMIN_IDS, MASSAGES, OTHER_SERVICE, EXTRA_SERVICE


class UserActions(StatesGroup):
    choose_date = State()
    choose_service = State()
    choose_extra = State()
    gift_certificate = State()


async def cancel_state(state: FSMContext) -> None:
    """
    Cancel the FSMContext machine state.
    :param state:
    :return: None
    """
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()


async def start_bot(message: Message, state: FSMContext):
    """
    Start the bot and check_
    :param message:
    :param state:
    :return:
    """
    telegram_id = message.from_user.id
    await cancel_state(state)
    if telegram_id in ADMIN_IDS:
        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç, –∫–æ–ª–ª–µ–≥–∞ {message.from_user.first_name}',
            reply_markup=admin_menu
        )
    elif await db.get_user_by_id(telegram_id) is None:
        # add new user to database!
        await message.answer(
            text='–ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ, —è –ø–æ–º–æ–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂ üòä'
                 '–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã üòâ',
            reply_markup=user_menu
        )
    else:
        await message.answer(
            text='–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è üòé\n\n'
                 '–•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂?',
            reply_markup=user_menu
        )


async def show_all_services(message: Message, state: FSMContext):
    """
    Show up a menu with massage types for user.
    :param message:
    :param state:
    :return:
    """
    await cancel_state(state)
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É üòä',
        reply_markup=service_inline_keyboard()
    )
    await state.set_state(UserActions.choose_service)


async def choose_service(query: CallbackQuery, state: FSMContext):
    """
    Choose a service by user.
    :param query:
    :param state:
    :return:
    """
    async with state.proxy() as data:
        if query.data == 'gift_certificate':
            data['selected_service'] = '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'
            await query.message.edit_text(
                '–ú–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç üéÅ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –∏–ª–∏'
                '–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–¥—É—Ä. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'
                ' –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã üòâ?',
            )
            await state.set_state(UserActions.gift_certificate)
        elif query.data in set(MASSAGES.keys()):
            name, time, price = get_service_info(MASSAGES, query.data)
            basic_text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time} –º–∏–Ω.\n'
                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n\n')
            if query.data in ('general', 'back_and_legs', 'hands_and_neck'):
                await query.message.edit_text(
                    text=basic_text + f'–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å'
                                      f'–¥–æ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:',
                    reply_markup=extra_service_inline_keyboard()
                )
                await state.set_state(UserActions.choose_extra)
            elif query.data == '4_hands':
                await query.message.edit_text(
                    text=basic_text + f'–¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Å–∞–∂–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ '
                                f'–≤—Ä–µ–º—è –¥–ª—è –¥–≤—É—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.'
                                f' –í–û–ó–ú–û–ñ–ù–û –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–í–Ø–ó–¨ C –ú–ê–°–°–ê–ñ–ò–°–¢–û–ú'
                                f' –£–¢–û–ß–ù–ò–¢–¨ –ë–´!',
                    reply_markup=await MassageCalendar().start_calendar()
                )
                await state.set_state(UserActions.choose_date)
            else:
                await query.message.edit_text(
                    text=basic_text,
                    reply_markup=await MassageCalendar().start_calendar()
                )
                await state.set_state(UserActions.choose_date)
            # Adding data to memory
            data['selected_service']: str = name
            data['primary_price'] = int(price)
            data['service_time'] = int(time)
        elif query.data in set(OTHER_SERVICE.keys()):
            name, time, price = get_service_info(OTHER_SERVICE, query.data)
            basic_text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {name}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time} –º–∏–Ω.\n'
                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n\n')
            await query.message.edit_text(
                text=basic_text,
                reply_markup=await MassageCalendar().start_calendar()
            )
            data['selected_service']: str = name
            data['primary_price'] = int(price)
            data['service_time'] = int(time)


async def choose_extra_service(query: CallbackQuery, state: FSMContext):
    """
    Choose extra service as optional
    :param query:
    :param state:
    :return:
    """
    async with state.proxy() as data:
        if query.data == 'backward':
            await state.set_state(UserActions.choose_service)
            await query.message.edit_text(
                text='–í—ã–±–µ—Ä–∏—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É üòä',
                reply_markup=service_inline_keyboard()
            )
        if query.data == 'select_date':
            await query.message.edit_reply_markup(
                reply_markup=await MassageCalendar().start_calendar()
            )
            await state.set_state(UserActions.choose_date)
        if query.data in set(EXTRA_SERVICE.keys()):
            extra_services = data.get('extra_services', [])
            service_names = ''
            total_price: int = data['primary_price']
            total_time: int = data['service_time']
            for button in extra_service_kb.inline_keyboard:
                if button[0].callback_data == query.data:
                    if '‚ù§Ô∏è' in button[0].text:
                        button[0].text = button[0].text.replace(' ‚ù§Ô∏è', '')
                    else:
                        button[0].text += ' ‚ù§Ô∏è'
                    service = query.data
                    if service not in extra_services:
                        extra_services.append(service)
                    else:
                        extra_services.remove(service)
                    await query.message.edit_reply_markup(
                        extra_service_kb)
                    await query.answer()
            data['extra_services'] = extra_services
            logging.info(f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø.—Å–µ—Ä–≤–∏—Å—ã: {extra_services}')
            for extra in extra_services:
                name, time, price = get_service_info(EXTRA_SERVICE, extra)
                service_names += f'- {name}\n'
                total_price += price
                total_time += time
            await query.message.edit_text(
                text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {data["selected_service"]}\n\n'
                     f'–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏:\n{service_names}\n'
                     f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time} –º–∏–Ω.\n'
                     f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n',
                reply_markup=extra_service_kb
            )
            if len(data['extra_services']) == 2:
                await query.message.edit_text(
                    text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {data["selected_service"]}\n\n'
                         f'–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏:\n{service_names}\n'
                         f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time} –º–∏–Ω.\n'
                         f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n'
                         f'–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–µ–∞–Ω—Å–∞ üòä',
                    reply_markup=await MassageCalendar().start_calendar()
                )
                await query.answer()
                await state.set_state(UserActions.choose_date)


# async def choose_gift_certificate():


async def show_calendar_for_user(message: Message, state: FSMContext):
    """
    Shows massage_calendar for user to book the massage session.
    :param message:
    :param state:
    :return:
    """
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂:\n –°–ª–æ–≤–∞ –æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ, –µ—Å—Ç—å/–Ω–µ—Ç'
             '–∑–∞–ø–∏—Å–∏',
        reply_markup=await MassageCalendar().start_calendar()
    )
    await state.set_state(UserActions.choose_date)


async def check_active_sessions_for_user(message: Message, state: FSMContext):
    """

    :param message:
    :param state:
    :return:
    """
    await cancel_state(state)
    telegram_id = message.from_user.id
    # GET ACTIVE SESSIONS FOR USER BY ID
    await message.answer(
        text='–¢–£–¢ –ó–ê–ü–ò–°–¨ –û –ú–ê–°–°–ê–ñ–ï',
        # –ö–ù–û–ü–ö–ê –û–¢–ú–ï–ù–´ –ï–õ–°–ò –í–†–ï–ú–Ø –ï–©–Å –ü–û–ó–í–û–õ–Ø–ï–¢
    )


async def ask_about_massage(message: Message, state: FSMContext):
    """

    :param message:
    :param state:
    :return:
    """
    await cancel_state()
    await message.answer(
        '–û—Ç–≤–µ—á–∞—é –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ '
        '–æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏'
        ' –≤–∞—Å –≤–æ–ø—Ä–æ—Å–∞–º–∏'
    )


def register_user_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        choose_service,
        lambda query: True,
        state=UserActions.choose_service
    )
    dp.register_callback_query_handler(
        choose_extra_service,
        lambda query: True,
        state=UserActions.choose_extra
    )
    dp.register_message_handler(
        start_bot,
        commands=['start',],
        state='*'
    )
    dp.register_message_handler(
        show_all_services,
        text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂ üíÜ‚Äç‚ôÇ',
        state='*'
    )